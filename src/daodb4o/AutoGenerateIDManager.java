/**********************************
 * IFPB - Curso Superior de Tec. em Sist. para Internet
 * POB - Persistencia de Objetos
 * Prof. Fausto Ayres
 *
 */
package daodb4o;

import java.util.HashMap;
import java.util.List;

import com.db4o.events.CancellableObjectEventArgs;
import com.db4o.events.CommitEventArgs;
import com.db4o.events.Event4;
import com.db4o.events.EventListener4;
import com.db4o.events.EventRegistry;
import com.db4o.events.EventRegistryFactory;
import com.sun.org.apache.xml.internal.security.signature.ObjectContainer;

public class AutoGenerateIDManager {
	private static ObjectContainer manager ;
	private static HashMap<String,Integer> contadores;
	private static boolean gerouid;

	/*
	 * IMPLEMENTA AUTOINCREMENTO DE ID EM QUALQUER CLASSE
	 * 
	 *  O hashmap contadores contem o nome da classe e o ultimo ID gerado para 
	 * a classe de objeto que implementa a interface AutoGenerated
	 */

	public static void inicializar (ObjectContainer m) {
		manager=m;
		registrarEventos(); 
	}

	public static void registrarEventos(){
		EventRegistry eventRegistry = EventRegistryFactory.forObjectContainer(manager);

		// PRE-PERSIST
		eventRegistry.creating().addListener(new EventListener4<CancellableObjectEventArgs>() {
			public void onEvent(Event4<CancellableObjectEventArgs> event4, CancellableObjectEventArgs args) {
				prePersist(args.object());
			}});
		// POST-PERSIST
		//		eventRegistry.created().addListener(new EventListener4<ObjectInfoEventArgs>() {
		//			public void onEvent(Event4<ObjectInfoEventArgs> event4, ObjectInfoEventArgs args) {
		//				postPersist(args.object());
		//			}});    
		// POST-ACTIVATE
		//		eventRegistry.activated().addListener(new EventListener4<ObjectInfoEventArgs>() {
		//			public void onEvent(Event4<ObjectInfoEventArgs> event4, ObjectInfoEventArgs args) {
		//				postActivate(args.object());
		//			}});
		// PRE-UPDATE
		//		eventRegistry.updating().addListener(new EventListener4<CancellableObjectEventArgs>() {
		//			public void onEvent(Event4<CancellableObjectEventArgs> event4, CancellableObjectEventArgs args) {
		//				preUpdate(args.object());
		//			}});
		// PRE-DELETE - deve ser configurado no servidor
		//		eventRegistry.deleting().addListener(new EventListener4<CancellableObjectEventArgs>() {
		//			public void onEvent(Event4<CancellableObjectEventArgs> event4, CancellableObjectEventArgs args) {
		//				preDelete(args.object());
		//			}});

		// POST-COMMIT  - apos finalizar a transação
		eventRegistry.committed().addListener(new EventListener4<CommitEventArgs>() {
			public void onEvent(Event4<CommitEventArgs> commitEventArgsEvent4, CommitEventArgs args) {
				postCommit();
			}});     		
	}

	private static void prePersist(Object objeto){
		// aqui as ações antes do objeto ser persistido 
		if(objeto instanceof AutoGenerateIDInterface){
			gerouid = true;
			carregarContadores();		
			AutoGenerateIDInterface objetoautoincrementado = (AutoGenerateIDInterface) objeto;
			int novoid = gerarNovoID(objetoautoincrementado);
			objetoautoincrementado.setId( novoid ); 

		}
		//para abortar a gravação use  event4.cancel();
	}
	private static void postCommit(){
		if (gerouid) {
			gerouid = false;
			gravarContadores();

		}
	}

	//--------------------------CONTADORES--------------------------------
	public static synchronized void carregarContadores () {
		List<HashMap<String,Integer>> resultados = manager.queryByExample(new HashMap<String,Integer>());
		if(resultados.size()==0)
			contadores = new HashMap<String,Integer>();
		else
			contadores = (HashMap<String, Integer>) resultados.get(0);
	}

	public static synchronized void gravarContadores (){
		manager.store(contadores);	
		manager.commit();
		//deletar o hashmap contadores do cache local 
		manager.ext().purge(contadores);
	}

	public static synchronized int gerarNovoID(Object obj){
		// obter a classe do objeto para usar como chave de acesso ao hashmap
		String nomedaclasse = obj.getClass().getName();	

		//criar nova entrada para a classe se a mesma ainda nao tiver
		if (contadores.get(nomedaclasse) == null)
			contadores.put(nomedaclasse, 0);  // inicializa contador com 0

		int id = contadores.get(nomedaclasse)+1;   //novo id gerado

		// atualizar contador no hashmap em memoria
		contadores.put(nomedaclasse, id); 		
		return id;

		//	try{System.out.println(obj.getClass().getDeclaredField("id") );	}
		//	catch(Exception e) {}
	}
}
